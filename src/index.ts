import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import { Dirent, readdirSync, readFileSync } from 'original-fs';
import { Transaction } from './transaction';
import { parse } from 'csv-parse/sync';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// IPC handlers
// async function handleOpenDialogSelectDir () {
//   const { canceled, filePaths } = await dialog.showOpenDialog({
//     properties: [
//       'openDirectory'
//     ]
//   })
//   if (!canceled) {
//     return filePaths[0]
//   }
// }

// async function handleReadFile (path: string) {
//   return readFileSync(path, 'utf-8');
// }

// async function handleReadDir(path: string) {

//   return readdirSync(path, {withFileTypes: true}).filter((dirEnt: Dirent) => dirEnt.isFile());
// }

async function handleOpenDialogReadCsvs(): Promise<Transaction[]> {
  const filePaths: string[] = await dialog.showOpenDialogSync({
    properties: [
      'openDirectory'
    ]
  })
  const filePath = filePaths[0];
  const dirEntries: Dirent[] = readdirSync(filePath, {withFileTypes: true})
    .filter((dirEnt: Dirent) => dirEnt.isFile());
  const fileData: string[] = await Promise.all(dirEntries
    .map(async dirEnt => await readFileSync(`${dirEnt.parentPath}/${dirEnt.name}`, 'utf-8')));
  const records: string[][] = fileData
    .map(data => parse(data, {bom: true, relax_quotes: true}))
    .reduce((acc, val) => acc.concat(val), []);
  records.forEach(record => {
    if (record.length != 5) {
      console.log(record)
    }
  });
  const transactions: Transaction[] = records
    .map(record => new Transaction(
      'test',
      Number(record[1]),
      new Date(record[0]),
      record[4]
    ))
  return transactions;
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow();
  ipcMain.handle('handleOpenDialogReadCsvs', handleOpenDialogReadCsvs);
  // ipcMain.handle('dialog:openDialogSelectDir', handleOpenDialogSelectDir);
  // ipcMain.handle('fs:readFile', (_event, path: string) => handleReadFile(path));
  // ipcMain.handle('fs:readDir', (_event, path: string) => handleReadDir(path));
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
